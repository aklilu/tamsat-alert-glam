import numpy as npdef pedoclass(soiltex, wth_path):    """    This function takes the name of the soil textural class and    calculate the input variables for JULES soil parameter.    :param soiltex: the name of one of the 12 soil textural classes as string.    :param wth_path: the path where the soil.txt file will be saved    :return the file for JULES input of soil properties.    """    # the 12 textural classes according to USDA.    texture = ['clay', 'silty clay', 'sandy clay', 'silty clay loam',               'clay loam', 'sandy clay loam', 'loam', 'silt loam',               'sandy loam', 'silt', 'loamy sand', 'sand']    # based on the soil textural triangle the central value of each    # polygon was chosen to determine the percentage of sand-silt-clay.    if soiltex == texture[0]:        sand = 20; silt = 20; clay = 60    elif soiltex == texture[1]:        sand = 10; silt = 45; clay = 45    elif soiltex == texture[2]:        sand = 50; silt = 10; clay = 40    elif soiltex == texture[3]:        sand = 10; silt = 55; clay = 35    elif soiltex == texture[4]:        sand = 33; silt = 33; clay = 34    elif soiltex == texture[5]:        sand = 60; silt = 10; clay = 30    elif soiltex == texture[6]:        sand = 40; silt = 40; clay = 20    elif soiltex == texture[7]:        sand = 20; silt = 65; clay = 15    elif soiltex == texture[8]:        sand = 65; silt = 25; clay = 10    elif soiltex == texture[9]:        sand = 5; silt = 90; clay = 5    elif soiltex == texture[10]:        sand = 80; silt = 15; clay = 5    elif soiltex == texture[11]:        sand = 90; silt = 5; clay = 5    else:        raise ValueError('The soil texture name you enter is not correct \please enter all values in small letter and with space if it is two or \more word. eg. sandy clay loam')    # each values os sand silt clay gives a specific values of    # soil property parameter for the JULES in order to account    # the possible combinations of sand-silt-clay at each textural    # class an average was taken. The average of the parameters was    # calculated using +/- 1%, +/- 2%, +/- 3% of sand-silt-clay    # and reallocating the values to the sand silt and clay accordingly.    soilpropval = []    for i in range(1, 4):        if i == 1:            x1 = np.array(pedo(sand, silt, clay))            x2 = np.array(pedo(sand + i, silt - i, clay))            x3 = np.array(pedo(sand - i, silt + i, clay))            x4 = np.array(pedo(sand + i, silt, clay - i))            x5 = np.array(pedo(sand - i, silt, clay + i))            x6 = np.array(pedo(sand, silt + i, clay - i))            x7 = np.array(pedo(sand, silt - i, clay + i))            xav = (x1 + x2 + x3 + x4 + x5 + x6 + x7) / 7            soilpropval = np.append(soilpropval, xav)        elif i == 2:            x1 = np.array(pedo(sand, silt, clay))            x2 = np.array(pedo(sand + i, silt - i, clay))            x3 = np.array(pedo(sand - i, silt + i, clay))            x4 = np.array(pedo(sand + i, silt, clay - i))            x5 = np.array(pedo(sand - i, silt, clay + i))            x6 = np.array(pedo(sand, silt + i, clay - i))            x7 = np.array(pedo(sand, silt - i, clay + i))            x8 = np.array(pedo(sand + i, silt - (i-1), clay - (i-1)))            x9 = np.array(pedo(sand - i, silt + (i-1), clay + (i-1)))            x10 = np.array(pedo(sand - (i-1), silt + i, clay - (i-1)))            x11 = np.array(pedo(sand + (i-1), silt - i, clay + (i-1)))            x12 = np.array(pedo(sand - (i-1), silt - (i-1), clay + i))            x13 = np.array(pedo(sand + (i-1), silt + (i-1), clay - i))            xav = (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13) / 13            soilpropval = np.append(soilpropval, xav)        elif i == 3:            x1 = np.array(pedo(sand, silt, clay))            x2 = np.array(pedo(sand + i, silt - i, clay))            x3 = np.array(pedo(sand - i, silt + i, clay))            x4 = np.array(pedo(sand + i, silt, clay - i))            x5 = np.array(pedo(sand - i, silt, clay + i))            x6 = np.array(pedo(sand, silt + i, clay - i))            x7 = np.array(pedo(sand, silt - i, clay + i))            x8 = np.array(pedo(sand + i, silt - (i-2), clay - (i-1)))            x9 = np.array(pedo(sand + i, silt - (i-1), clay - (i-2)))            x10 = np.array(pedo(sand - i, silt + (i-2), clay + (i-1)))            x11 = np.array(pedo(sand - i, silt + (i-1), clay + (i-2)))            x12 = np.array(pedo(sand - (i-2), silt + i, clay - (i-1)))            x13 = np.array(pedo(sand - (i-1), silt + i, clay - (i-2)))                       x14 = np.array(pedo(sand + (i-2), silt - i, clay + (i-1)))            x15 = np.array(pedo(sand + (i-1), silt - i, clay + (i-2)))                       x16 = np.array(pedo(sand - (i-2), silt - (i-1), clay + i))            x17 = np.array(pedo(sand - (i-1), silt - (i-2), clay + i))                      x18 = np.array(pedo(sand + (i-2), silt + (i-1), clay - i))            x19 = np.array(pedo(sand + (i-1), silt + (i-2), clay - i))            xav = (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 +                   x13 + x14 + x15 + x16 + x17 + x18 + x19) / 19            soilpropval = np.append(soilpropval, xav)        else:            raise ValueError('Problem with average soil parameter calculation!!!')    soilpropval = np.reshape(soilpropval, (3, len(xav)))    soilpropval = np.mean(soilpropval, axis=0)    ILAT = 1    ILON = 1  # RLL, DUL, SAT    output = ILAT, ILON, soilpropval[5], soilpropval[4], soilpropval[3]    output = np.array(output)    np.savetxt(wth_path+'../../soils.txt', output.reshape((1, 5)), delimiter='  ',               fmt='%i  %i   %0.3f     %0.3f   %0.3f', newline=" ")    return soilpropval        def pedo(sand, silt, clay):    # Air entry potential (in m)    psis = 0.01 * (10**(1.54-0.0095 * sand + 0.0063 * silt))    # Saturated volumetric water content (VMC) in m3 m-3    thetas = (50.5 - 0.142 * sand - 0.037 * clay) / 100    # Brooks & Corey, Clapp & Hornberger and Cosby et al b-parameter    b = 3.1 + 0.157 * clay - 0.003 * sand    # Saturated hydraulic conductivity in inches/hour    ksat_inch_hour = 10**(-0.6 - 0.0064 * clay + 0.0126 * sand)    # Saturated hydraulic conductivity in m/s    ksat_metre_sec = (0.0254 / 3600) * ksat_inch_hour    # Field capacity VMC (called critical point in JULES), in m3 m-3    fc = thetas * (3.3 / psis)**(-1 / b)    # Wilting point VMC, in m3 m-3    wp = thetas * (150 / psis)**(-1 / b)    return b, psis, ksat_metre_sec*1000, thetas, fc, wpif __name__ == '__main__':    print pedoclass('sandy loam', './config/maize_ghana/ascii_input/wth/')    # b,psi_s,Ks,theta_s,theta_c,theta_w = pedo(20,20,60)    # b, psi_s, Ks, theta_s, theta_c, theta_w = pedoclass('clay')